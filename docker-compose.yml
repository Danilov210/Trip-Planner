services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-id-1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  state-db:
    image: postgres
    environment:
      POSTGRES_USER: state_user
      POSTGRES_PASSWORD: state_pass
      POSTGRES_DB: state_db
    ports:
      - "5433:5432"
    volumes:
      - ./databases/state-db/init.sql:/docker-entrypoint-initdb.d/init.sql

  app-db:
    image: postgres
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_pass
      POSTGRES_DB: app_db
    ports:
      - "5434:5432"
    volumes:
      - ./databases/app-db/init.sql:/docker-entrypoint-initdb.d/init.sql

  api-server:
    build:
      context: .
      dockerfile: api-server/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./api-server/.env
    depends_on:
      - kafka
      - app-db
    environment:
      - PYTHONPATH=/api-server:/shared

  logic-worker:
    build:
      context: .
      dockerfile: logic-worker/Dockerfile
    env_file:
      - ./logic-worker/.env
    depends_on:
      - kafka
      - state-db
      - app-db
    environment:
      - PYTHONPATH=/worker:/worker/shared

  frontend-ui:
    build: ./frontend-ui
    ports:
      - "3000:3000"
    env_file:
      - ./frontend-ui/.env
    depends_on:
      - api-server
